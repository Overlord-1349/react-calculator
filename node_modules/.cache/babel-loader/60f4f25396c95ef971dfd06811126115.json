{"ast":null,"code":"var _jsxFileName = \"/Users/overlord/GDrive/it-dev/source-code/web/react-calculator/src/containers/react-calculator.js\";\nimport React, { Component } from 'react';\nimport CalcGrid from '../components/react-calculator/calc-grid';\nimport Calculator from './calculator';\n\nclass ReactCalculator extends Component {\n  constructor(props) {\n    super(props);\n\n    this._showAllOps = () => {\n      var outputAll = \"\";\n      this.state.calc.operations.forEach(oper => {\n        outputAll += `${oper.number} ${oper.operation} `;\n      });\n      this.inputValueAll = outputAll;\n    };\n\n    this.clear = e => {\n      this.inputValue = \"\";\n      this.inputValueAll = \"\";\n      let calc = this.state.calc;\n      calc.empty();\n      this.setState({\n        calc: calc\n      });\n    };\n\n    this.addNumber = value => {\n      this.inputValue += value;\n    };\n\n    this.addOperation = value => {\n      let calc = this.state.calc;\n      calc.add(this.inputValue, value);\n      this.setState({\n        calc: calc\n      });\n      this.inputValue = \"\";\n\n      this._showAllOps();\n\n      console.log(this.state.calc.operations);\n\n      if (value === Calculator.equals) {\n        this.calculateTotal();\n      }\n    };\n\n    this.calculateTotal = () => {\n      this._showAllOps();\n\n      this.inputValue = this.state.calc.getTotal();\n    };\n\n    this.keyDown = e => {\n      let value = String.fromCharCode(e.which || e.keyCode);\n      console.log(e.keyCode, value, e.key);\n\n      if (!isNaN(value)) {\n        this.addNumber(value);\n        return true;\n      } else if (Calculator.isValidOperation(value)) {\n        this.addOperation(value);\n      }\n\n      return false;\n    };\n\n    let id = this.props.id ? this.props.id : Math.random().toString(36).substring(7);\n    this.state = {\n      calc: new Calculator(),\n      id: id,\n      inpAll: `${id}_all`\n    };\n    console.log(this.state.id);\n  }\n\n  set inputValue(value) {\n    document.getElementById(this.state.id).value = value;\n  }\n\n  get inputValue() {\n    return document.getElementById(this.state.id).value;\n  }\n\n  set inputValueAll(value) {\n    document.getElementById(this.state.inpAll).value = value;\n  }\n\n  get inputValueAll() {\n    return document.getElementById(this.state.inpAll).value;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(CalcGrid, {\n      id: `${this.state.id}`,\n      clear: this.clear,\n      addNumber: this.addNumber,\n      addOperation: this.addOperation,\n      keyDown: this.keyDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ReactCalculator;","map":{"version":3,"sources":["/Users/overlord/GDrive/it-dev/source-code/web/react-calculator/src/containers/react-calculator.js"],"names":["React","Component","CalcGrid","Calculator","ReactCalculator","constructor","props","_showAllOps","outputAll","state","calc","operations","forEach","oper","number","operation","inputValueAll","clear","e","inputValue","empty","setState","addNumber","value","addOperation","add","console","log","equals","calculateTotal","getTotal","keyDown","String","fromCharCode","which","keyCode","key","isNaN","isValidOperation","id","Math","random","toString","substring","inpAll","document","getElementById","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CalcGrid from '../components/react-calculator/calc-grid';\nimport Calculator from './calculator';\n\nclass ReactCalculator extends Component{\n\n    constructor(props){\n        super(props);\n        let id = this.props.id ? this.props.id : Math.random().toString(36).substring(7);\n        this.state = {\n            calc: new Calculator(),\n            id: id,\n            inpAll: `${id}_all`\n        }\n        console.log(this.state.id);\n    }\n\n    set inputValue(value){\n        document.getElementById(this.state.id).value = value;\n    }\n\n    get inputValue(){\n        return document.getElementById(this.state.id).value;\n    }\n\n    set inputValueAll(value){\n        document.getElementById(this.state.inpAll).value = value;\n    }\n\n    get inputValueAll(){\n        return document.getElementById(this.state.inpAll).value;\n    }\n\n    _showAllOps = () => {\n        var outputAll = \"\";\n        this.state.calc.operations.forEach((oper) => {\n            outputAll += `${oper.number} ${oper.operation} `;\n        });\n        this.inputValueAll = outputAll;\n    }\n    \n    clear = (e) =>{\n        this.inputValue = \"\";\n        this.inputValueAll = \"\";\n        let calc = this.state.calc;\n        calc.empty();\n        this.setState({calc: calc});\n    }\n\n    addNumber = (value) => { \n        this.inputValue += value;\n    }\n\n    addOperation = (value) => {\n        let calc = this.state.calc;\n        calc.add(this.inputValue, value);\n        this.setState({calc: calc});\n        this.inputValue = \"\";\n        this._showAllOps();\n        console.log(this.state.calc.operations);\n        if (value === Calculator.equals){\n            this.calculateTotal();\n        }\n    }\n\n    calculateTotal = () => {\n        this._showAllOps();\n        this.inputValue = this.state.calc.getTotal();\n    }\n\n    keyDown = (e) => {\n        let value = String.fromCharCode( e.which || e.keyCode );\n        console.log(e.keyCode, value, e.key);\n        if (!isNaN(value)){\n            this.addNumber(value);\n            return true;\n        }\n        else if (Calculator.isValidOperation(value)){\n            this.addOperation(value);\n        }\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <CalcGrid \n                    id={`${this.state.id}`}\n                    clear={this.clear}\n                    addNumber={this.addNumber}\n                    addOperation={this.addOperation}\n                    keyDown={this.keyDown}\n                    /> \n            </div>\n        )\n    }\n}\n\n\nexport default ReactCalculator;"]},"metadata":{},"sourceType":"module"}