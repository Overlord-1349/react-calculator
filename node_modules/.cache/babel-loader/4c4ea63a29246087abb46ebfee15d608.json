{"ast":null,"code":"class Calculator {\n  constructor() {\n    this.empty = () => {\n      this.ops = [];\n    };\n\n    this.add = (number, operation) => {\n      try {\n        this.ops.push({\n          'number': Number(number),\n          'operation': operation\n        });\n        return true;\n      } catch (error) {\n        return false;\n      }\n    };\n\n    this.getTotal = () => {\n      var total = undefined;\n      var prior_op = undefined;\n      this.ops.forEach(operation => {\n        if (prior_op) {\n          switch (prior_op.operation) {\n            case Calculator.addition:\n              total = total ? total + operation.number : prior_op.number + operation.number;\n              break;\n\n            case '-':\n              total = total ? total - operation.number : prior_op.number - operation.number;\n              break;\n\n            case '*':\n              total = total ? total * operation.number : prior_op.number * operation.number;\n              break;\n\n            case '/':\n              total = total ? total / operation.number : prior_op.number / operation.number;\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        prior_op = operation;\n      });\n      return total;\n    };\n\n    this.ops = [];\n  }\n\n  get operations() {\n    return this.ops;\n  }\n\n  static get addition() {\n    return \"+\";\n  }\n\n  static get substraction() {\n    return '-';\n  }\n\n  static get multiplication() {\n    return '*';\n  }\n\n  static get division() {\n    return \"/\";\n  }\n\n}\n\nexport default Calculator;","map":{"version":3,"sources":["/Users/overlord/GDrive/it-dev/source-code/web/react-calculator/src/containers/calculator.js"],"names":["Calculator","constructor","empty","ops","add","number","operation","push","Number","error","getTotal","total","undefined","prior_op","forEach","addition","operations","substraction","multiplication","division"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AAEbC,EAAAA,WAAW,GAAE;AAAA,SAIbC,KAJa,GAIL,MAAM;AACV,WAAKC,GAAL,GAAW,EAAX;AACH,KANY;;AAAA,SAQbC,GARa,GAQP,CAACC,MAAD,EAASC,SAAT,KAAuB;AACzB,UAAI;AACA,aAAKH,GAAL,CAASI,IAAT,CAAe;AACX,oBAAUC,MAAM,CAACH,MAAD,CADL;AAEX,uBAAaC;AAFF,SAAf;AAIA,eAAO,IAAP;AACH,OAND,CAME,OAAOG,KAAP,EAAc;AACZ,eAAO,KAAP;AACH;AACJ,KAlBY;;AAAA,SAoBbC,QApBa,GAoBF,MAAM;AACb,UAAIC,KAAK,GAAGC,SAAZ;AACA,UAAIC,QAAQ,GAAGD,SAAf;AACA,WAAKT,GAAL,CAASW,OAAT,CAAkBR,SAAD,IAAe;AAC5B,YAAIO,QAAJ,EAAc;AACV,kBAAOA,QAAQ,CAACP,SAAhB;AACI,iBAAKN,UAAU,CAACe,QAAhB;AACIJ,cAAAA,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAGL,SAAS,CAACD,MAArB,GAA8BQ,QAAQ,CAACR,MAAT,GAAkBC,SAAS,CAACD,MAAvE;AACA;;AACJ,iBAAK,GAAL;AACIM,cAAAA,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAGL,SAAS,CAACD,MAArB,GAA8BQ,QAAQ,CAACR,MAAT,GAAkBC,SAAS,CAACD,MAAvE;AACA;;AACJ,iBAAK,GAAL;AACIM,cAAAA,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAGL,SAAS,CAACD,MAArB,GAA8BQ,QAAQ,CAACR,MAAT,GAAkBC,SAAS,CAACD,MAAvE;AACA;;AACJ,iBAAK,GAAL;AACIM,cAAAA,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAGL,SAAS,CAACD,MAArB,GAA8BQ,QAAQ,CAACR,MAAT,GAAkBC,SAAS,CAACD,MAAvE;AACA;;AACJ;AACI;AAdR;AAgBH;;AACDQ,QAAAA,QAAQ,GAAGP,SAAX;AACH,OApBD;AAqBA,aAAOK,KAAP;AACH,KA7CY;;AACT,SAAKR,GAAL,GAAW,EAAX;AACH;;AA6CD,MAAIa,UAAJ,GAAgB;AACZ,WAAO,KAAKb,GAAZ;AACH;;AAED,aAAWY,QAAX,GAAqB;AACjB,WAAO,GAAP;AACH;;AAED,aAAWE,YAAX,GAAyB;AACrB,WAAO,GAAP;AACH;;AAED,aAAWC,cAAX,GAA2B;AACvB,WAAO,GAAP;AACH;;AAED,aAAWC,QAAX,GAAqB;AACjB,WAAO,GAAP;AACH;;AAnEY;;AAuEjB,eAAenB,UAAf","sourcesContent":["class Calculator {\n    \n    constructor(){\n        this.ops = [];\n    }\n    \n    empty = () => {\n        this.ops = [];\n    }\n\n    add = (number, operation) => {\n        try {\n            this.ops.push( {\n                'number': Number(number),\n                'operation': operation\n            });\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    getTotal = () => {\n        var total = undefined;\n        var prior_op = undefined;\n        this.ops.forEach((operation) => {\n            if (prior_op) {\n                switch(prior_op.operation){\n                    case Calculator.addition:\n                        total = total ? total + operation.number : prior_op.number + operation.number; \n                        break;\n                    case '-':\n                        total = total ? total - operation.number : prior_op.number - operation.number; \n                        break;\n                    case '*':\n                        total = total ? total * operation.number : prior_op.number * operation.number; \n                        break;\n                    case '/':\n                        total = total ? total / operation.number : prior_op.number / operation.number;  \n                        break;\n                    default:\n                        break;\n                }\n            }\n            prior_op = operation;\n        });\n        return total;\n    }\n\n    get operations(){\n        return this.ops;\n    }\n\n    static get addition(){\n        return \"+\";\n    }\n\n    static get substraction(){\n        return '-';\n    }\n\n    static get multiplication(){\n        return '*';\n    }\n\n    static get division(){\n        return \"/\";\n    }\n\n}\n\nexport default Calculator;"]},"metadata":{},"sourceType":"module"}